# This has not been implemented in your chosen language, so here's pseudocode
type Node{
    vector{Int} children
    int ID;
}

# This has not been implemented in your chosen language, so here's pseudocode
function DFS_recursive(Node n){
    // Here we are doing something...
    print(n.ID)

    for child in n.children{
        DFS_recursive(child)
    }
}

# This has not been implemented in your chosen language, so here's pseudocode
function DFS_recursive_postorder(Node n){

    for child in n.children{
        DFS_recursive_postorder(child)
    }

    // Here we are doing something...
    print(n.ID)
}

# This has not been implemented in your chosen language, so here's pseudocode
# This assumes only 2 children
function DFS_recursive_inorder_btree(Node n){

    if (size(n.children) > 2)){
        print("Not a binary tree!")
        exit(1)
    }

    if (size(n.children) > 0){
        DFS_recursive_inorder_btree(n.children[0])
        print(n.ID)
        DFS_recursive_inorder_btree(n.children[1])
    }
    else{
        print(n.ID)
    }
}

# This has not been implemented in your chosen language, so here's pseudocode
function DFS_stack(Node n){
    stack s
    s.push(n)
    Node temp

    while(size(s) > 0){
        print(s.top().ID)
        temp = s.top()
        s.pop()
        for child in temp.children{
            s.push(child)
        }
    }
}

# This has not been implemented in your chosen language, so here's pseudocode
function BFS_queue(Node n){
    queue q
    q.push(n)
    Node temp

    while(size(q) > 0){
        print(q.front().ID)
        temp = q.front()
        q.pop()
        for child in temp.children{
            q.push(child)
        }
    }
}

